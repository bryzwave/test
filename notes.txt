Configuring Tooling: 

    - git config --global user.name "[name]"
    sets the name you want attached to you commit transactions

    - git config --global user.email "[email address]"
    sets the email you want attached to your commit transactions

    - git config --global color.ui auto 
    enables helpful colorization of command line output 

Create Repositories:

    - git init [Project-name]
    Creates a new local repository with the specified name

    - git clone [url]
    Downloads a project an its entire version history

Make Changes:

    - git status
    Lists all new or modified files to be commited 

    - git diff 
    shows file differences not yet staged

    - git diff --staged
    shows file differences between staging and the last file version 

Group Changes:

    - git branch
    lists all local branches in the current directory 

    - git branch ["branch-name"]
    Creates new branch

    - git checkout ["branch-name"]
    Switches to the specified branch and updates the working directory

    - git merge [branch]
    Combines the specified branch's history into the current branch 

    - git branch -d ["branch-name"]
    Deletes the specified branch 

Refactor Filenames:

    - git rm [file]
    Deletes the file from the working directory and stages the deletion

    - git rm --cached [file]
    Removes the file version control but preserves the file locally

    - git mv [file-original][file-renamed]
    Changes the file name and prepares it for commit

Suppress Tracking:

    - git ls-files --other --ignored --exclude-standard
    lists all ignored files in this project 

Save Fragment:

    - git stash
    Temporarily stores all modified tracked files 

    - git stash pop
    Restores the most recently stashed files

    - git stash drop 
    Discards the most recently stashed change set 

Review history:

    - git log
    Lists version history for the current branch 

    - git log --follow [file]
    Lists version history for a file, including renames 

    - git diff [first-branch]...[[second-branch]
    Shows content differences between two branches 

    - git show [commit]
    Output metadata and content changes of the specified commit 

Redo Commits:

    - git reset [commit]
    Undoes all commits after [commit], preserving changes locally 

    - git reset --hard [commit]
    Discards all history and changes back to the specified commit 

Synchronize Changes:

    - git fetch [bookmark]
    Downloads all history from the repository bookmark
    
    - git merge [bookmark]/[branch]
    Combines bookmark's branch into current local branch 

    - git push [alias][branch]
    Uploads all local branch commits to GitHub

    - git pull
    Downloads bookmark history and incorporates changes 

yep yep I'm changing that on the branch 
